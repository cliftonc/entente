name: Deploy Castle Client

on:
  push:
    branches: [main]
    paths:
      - 'examples/castle-client/**'
      - '.github/workflows/castle-client-deploy.yml'
  pull_request:
    branches: [main]
    paths:
      - 'examples/castle-client/**'
      - '.github/workflows/castle-client-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.changes.outputs.castle-client }}
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install published Entente packages in castle-client
        working-directory: examples/castle-client
        run: pnpm add @entente/types@^0.1.2 @entente/consumer@^0.1.2 @entente/fixtures@^0.1.2

      - name: Install castle-client dependencies
        working-directory: examples/castle-client
        run: pnpm install

      - name: Install Entente CLI globally
        run: npm install -g @entente/cli@latest

      - name: Get version from package.json
        id: version
        run: |
          cd examples/castle-client
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using package.json version: $VERSION"

      - name: Check path changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            castle-client:
              - 'examples/castle-client/**'
              - '.github/workflows/castle-client-deploy.yml'

      - name: Build castle-client
        if: steps.changes.outputs.castle-client == 'true'
        env:
          ENTENTE_SERVICE_URL: ${{ vars.ENTENTE_SERVICE_URL }}
          ENTENTE_API_KEY: ${{ secrets.ENTENTE_API_KEY }}
        run: pnpm --filter @entente/example-castle-client build

      - name: Register service with Entente
        if: steps.changes.outputs.castle-client == 'true'
        env:
          ENTENTE_API_KEY: ${{ secrets.ENTENTE_API_KEY }}
        run: |
          cd examples/castle-client
          entente register-service \
            --type consumer \
            --name castle-client \
            --environment development

      - name: Run castle-client tests
        if: steps.changes.outputs.castle-client == 'true'
        env:
          ENTENTE_SERVICE_URL: ${{ vars.ENTENTE_SERVICE_URL }}
          ENTENTE_API_KEY: ${{ secrets.ENTENTE_API_KEY }}
        run: pnpm --filter @entente/example-castle-client test

  deploy-development:
    if: needs.build-and-test.outputs.should-deploy == 'true' && (github.event_name == 'push' || github.event_name == 'pull_request' || github.event.inputs.environment == 'development')
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install published Entente packages in castle-client
        working-directory: examples/castle-client
        run: pnpm add @entente/types@^0.1.2 @entente/consumer@^0.1.2 @entente/fixtures@^0.1.2

      - name: Install castle-client dependencies
        working-directory: examples/castle-client
        run: pnpm install

      - name: Install Entente CLI globally
        run: npm install -g @entente/cli@latest

      - name: Build castle-client
        env:
          ENTENTE_SERVICE_URL: ${{ vars.ENTENTE_SERVICE_URL }}
          ENTENTE_API_KEY: ${{ secrets.ENTENTE_API_KEY }}
        run: pnpm --filter @entente/example-castle-client build

      - name: Check deployment readiness
        env:
          ENTENTE_API_KEY: ${{ secrets.ENTENTE_API_KEY }}
        run: |
          cd examples/castle-client
          entente can-i-deploy \
            --type consumer \
            --service castle-client \
            --service-version ${{ needs.build-and-test.outputs.version }} \
            --environment development

      - name: Deploy to Cloudflare Workers (Development)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: examples/castle-client
          command: deploy --name castle-client-dev --env development
        env:
          ENVIRONMENT: development

      - name: Record deployment
        env:
          ENTENTE_API_KEY: ${{ secrets.ENTENTE_API_KEY }}
        run: |
          cd examples/castle-client
          entente deploy-service \
            --name castle-client \
            --service-version ${{ needs.build-and-test.outputs.version }} \
            --environment development \
            --type consumer

      - name: Run smoke tests
        run: |
          sleep 10
          curl -f https://castle-client-dev.${{ vars.CLOUDFLARE_WORKERS_SUBDOMAIN }}.workers.dev/health || exit 1

  deploy-staging:
    if: needs.build-and-test.outputs.should-deploy == 'true' && (github.event_name == 'push' || github.event.inputs.environment == 'staging' || github.event.inputs.environment == 'production')
    needs: [build-and-test, deploy-development]
    runs-on: ubuntu-latest
    environment: staging

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install published Entente packages in castle-client
        working-directory: examples/castle-client
        run: pnpm add @entente/types@^0.1.2 @entente/consumer@^0.1.2 @entente/fixtures@^0.1.2

      - name: Install castle-client dependencies
        working-directory: examples/castle-client
        run: pnpm install

      - name: Install Entente CLI globally
        run: npm install -g @entente/cli@latest

      - name: Build castle-client
        env:
          ENTENTE_SERVICE_URL: ${{ vars.ENTENTE_SERVICE_URL }}
          ENTENTE_API_KEY: ${{ secrets.ENTENTE_API_KEY }}
        run: pnpm --filter @entente/example-castle-client build

      - name: Check deployment readiness
        env:
          ENTENTE_API_KEY: ${{ secrets.ENTENTE_API_KEY }}
        run: |
          cd examples/castle-client
          entente can-i-deploy \
            --type consumer \
            --service castle-client \
            --service-version ${{ needs.build-and-test.outputs.version }} \
            --environment staging

      - name: Deploy to Cloudflare Workers (Staging)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: examples/castle-client
          command: deploy --name castle-client-staging --env staging
        env:
          ENVIRONMENT: staging

      - name: Record deployment
        env:
          ENTENTE_API_KEY: ${{ secrets.ENTENTE_API_KEY }}
        run: |
          cd examples/castle-client
          entente deploy-service \
            --name castle-client \
            --service-version ${{ needs.build-and-test.outputs.version }} \
            --environment staging \
            --type consumer

      - name: Run smoke tests
        run: |
          sleep 10
          curl -f https://castle-client-staging.${{ vars.CLOUDFLARE_WORKERS_SUBDOMAIN }}.workers.dev/health || exit 1

  deploy-production:
    if: needs.build-and-test.outputs.should-deploy == 'true' && (github.event_name == 'push' || github.event.inputs.environment == 'production')
    needs: [build-and-test, deploy-staging]
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install published Entente packages in castle-client
        working-directory: examples/castle-client
        run: pnpm add @entente/types@^0.1.2 @entente/consumer@^0.1.2 @entente/fixtures@^0.1.2

      - name: Install castle-client dependencies
        working-directory: examples/castle-client
        run: pnpm install

      - name: Install Entente CLI globally
        run: npm install -g @entente/cli@latest

      - name: Build castle-client
        env:
          ENTENTE_SERVICE_URL: ${{ vars.ENTENTE_SERVICE_URL }}
          ENTENTE_API_KEY: ${{ secrets.ENTENTE_API_KEY }}
        run: pnpm --filter @entente/example-castle-client build

      - name: Check deployment readiness
        env:
          ENTENTE_API_KEY: ${{ secrets.ENTENTE_API_KEY }}
        run: |
          cd examples/castle-client
          entente can-i-deploy \
            --type consumer \
            --service castle-client \
            --service-version ${{ needs.build-and-test.outputs.version }} \
            --environment production

      - name: Deploy to Cloudflare Workers (Production)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: examples/castle-client
          command: deploy --name castle-client --env production
        env:
          ENVIRONMENT: production

      - name: Record deployment
        env:
          ENTENTE_API_KEY: ${{ secrets.ENTENTE_API_KEY }}
        run: |
          cd examples/castle-client
          entente deploy-service \
            --name castle-client \
            --service-version ${{ needs.build-and-test.outputs.version }} \
            --environment production \
            --type consumer

      - name: Run smoke tests
        run: |
          sleep 10
          curl -f https://castle-client.${{ vars.CLOUDFLARE_WORKERS_SUBDOMAIN }}.workers.dev/health || exit 1
